from sqlalchemy import Column, Integer, String, ForeignKey, DECIMAL, Float, Date, PrimaryKeyConstraint
from sqlalchemy.orm import relationship
from databases.food_data_connect import Base

# User specific data

class User(Base):
  __tablename__ = 'user'
  @staticmethod
  def to_str():
    return "user" 
  
  # primary
  user_id = Column(Integer, primary_key=True, autoincrement=True)
  name = Column(String(50), nullable=False)
  email = Column(String(100), unique=True, nullable=False)
  password_hash = Column(String(128), nullable=False)
  
  log = relationship('Log', back_populates='user')
  requirement = relationship('Requirement', back_populates='user')

class Log(Base):
  __tablename__ = 'log'
  @staticmethod
  def to_str():
    return "log" 
  
  # primary
  log_id = Column(Integer, primary_key=True, autoincrement=True)
  user_id = Column(Integer, ForeignKey('user.user_id'))
  food_id = Column(Integer, ForeignKey('food.food_id'))
  date = Column(Date, nullable=False)
  amount_in_grams = Column(Float, nullable=False)
  
  
  # relationships
  user = relationship('User', back_populates='log')
  food = relationship('Food', back_populates='log')

class Requirement(Base):
  __tablename__= 'requirement'  
  @staticmethod
  def to_str():
    return "requirement" 
  
  #primary
  user_id = Column(Integer, ForeignKey('user.user_id'), primary_key = True)
  nutrient_id = Column(Integer, ForeignKey('nutrient.nutrient_id'), primary_key = True)
  amt = Column(DECIMAL(13,3))
  
  #relationships. useList = False denotes a 1-1 relationship
  user = relationship('User', back_populates='requirement')
  nutrient = relationship('Nutrient', back_populates='requirement')
  